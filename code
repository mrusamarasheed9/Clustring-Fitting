# Import necessary libraries
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from sklearn import datasets
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.metrics import silhouette_score
import numpy as np

# Load the Iris dataset
def load_iris_data():
    iris_data = datasets.load_iris()
    iris_df = pd.DataFrame(data=iris_data.data, columns=iris_data.feature_names)
    iris_df['species'] = iris_data.target
    species_map = {0: 'setosa', 1: 'versicolor', 2: 'virginica'}
    iris_df['species'] = iris_df['species'].map(species_map)
    return iris_df

# Create histograms for each feature in the dataset
def create_categorical_graph(iris_df):
    features = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']
    fig, axes = plt.subplots(2, 2, figsize=(12, 8))

    # Plot histograms for each feature
    for i, ax in enumerate(axes.flat):
        sns.histplot(iris_df[features[i]], bins=15, kde=True, ax=ax, color='blue')
        ax.set_title(f'Histogram of {features[i]}')
        ax.set_xlabel(features[i])
        ax.set_ylabel('Frequency')

    fig.tight_layout()
    plt.show()

# Create scatter plots to visualize the clustering results
def create_relational_graph(iris_df):
    # Define the number of clusters (k)
    k = 3
    kmeans = KMeans(n_clusters=k, random_state=42)
    
    # Apply K-means clustering using numerical columns only
    numerical_data = iris_df[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']]
    iris_df['cluster'] = kmeans.fit_predict(numerical_data)
    
    # Scatter plots for sepal and petal lengths
    fig, axes = plt.subplots(1, 2, figsize=(12, 6))

    sns.scatterplot(x='sepal length (cm)', y='sepal width (cm)', hue='cluster', palette='viridis', data=iris_df, ax=axes[0])
    axes[0].set_title('Sepal Length vs Sepal Width')
    sns.scatterplot(x='petal length (cm)', y='petal width (cm)', hue='cluster', palette='viridis', data=iris_df, ax=axes[1])
    axes[1].set_title('Petal Length vs Petal Width')

    fig.tight_layout()
    plt.show()

# Plot elbow and silhouette plots to evaluate clustering
def create_statistical_graph(iris_df):
    cluster_range = range(2, 11)
    inertia_values = []
    silhouette_values = []

    # Test different numbers of clusters and record inertia and silhouette scores
    numerical_data = iris_df[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']]
    for k in cluster_range:
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(numerical_data)
        inertia_values.append(kmeans.inertia_)
        silhouette_values.append(silhouette_score(numerical_data, kmeans.labels_))

    # Plot the elbow plot and silhouette plot
    fig, axes = plt.subplots(1, 2, figsize=(12, 6))

    # Elbow plot (inertia vs. number of clusters)
    axes[0].plot(cluster_range, inertia_values, marker='o', color='blue')
    axes[0].set_title('Elbow Plot')
    axes[0].set_xlabel('Number of Clusters')
    axes[0].set_ylabel('Inertia')

    # Silhouette plot (silhouette score vs. number of clusters)
    axes[1].plot(cluster_range, silhouette_values, marker='o', color='green')
    axes[1].set_title('Silhouette Plot')
    axes[1].set_xlabel('Number of Clusters')
    axes[1].set_ylabel('Silhouette Score')

    fig.tight_layout()
    plt.show()

# Create a heatmap showing correlations between features
def create_heatmap(iris_df):
    # Calculate the correlation matrix using only numerical columns
    numerical_data = iris_df[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']]
    correlation_matrix = numerical_data.corr()

    # Plot the heatmap
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
    plt.title('Heatmap of Correlation Matrix')
    plt.show()

# Perform linear regression and plot the results
def perform_linear_regression(iris_df):
    # Define the linear regression model
    linear_reg = LinearRegression()
    
    # Define features and target for fitting
    X = iris_df[['sepal length (cm)', 'sepal width (cm)']]
    y = iris_df['petal length (cm)']
    
    # Fit the model
    linear_reg.fit(X, y)
    
    # Predict petal length
    y_pred = linear_reg.predict(X)
    
    # Plot actual vs predicted petal length
    fig, ax = plt.subplots(figsize=(8, 6))
    ax.scatter(y, y_pred, alpha=0.6, color='blue', label='Actual vs Predicted')
    ax.plot([1, 7], [1, 7], color='red', linestyle='--', label='Perfect Prediction')
    
    # Set labels and title
    ax.set_title('Linear Regression: Actual vs Predicted Petal Length')
    ax.set_xlabel('Actual Petal Length (cm)')
    ax.set_ylabel('Predicted Petal Length (cm)')
    
    # Add a legend
    ax.legend()
    plt.show()

# Main function to execute the script
def main():
    # Load the Iris dataset
    iris_df = load_iris_data()
    
    # Create categorical graph
    create_categorical_graph(iris_df)
    
    # Create relational graph
    create_relational_graph(iris_df)
    
    # Create statistical graph
    create_statistical_graph(iris_df)
    
    # Create heatmap
    create_heatmap(iris_df)
    
    # Perform linear regression and plot results
    perform_linear_regression(iris_df)

# Execute the main function
if __name__ == '__main__':
    main()
